---
description: Use `useCloseableInScope` and similar methods to ensure proper resource cleanup when scopes end, regardless of success or failure.
globs: 
alwaysApply: false
---
# Ox Resource Scopes

Use `useCloseableInScope` and similar methods to ensure proper resource cleanup when scopes end, regardless of success or failure.

**Automatic resource cleanup:**
```scala
supervised {
  val writer = useCloseableInScope(new FileWriter("output.txt"))
  val connection = useCloseableInScope(database.getConnection())
  
  // Use resources
  writer.write("data")
  val results = connection.query("SELECT * FROM users")
  
  // Resources automatically closed when scope ends
}
```

**Custom resource management:**
```scala
supervised {
  val server = useInScope(
    acquire = startServer(port),
    release = _.shutdown()
  )
  
  // Server automatically shut down when scope ends
  handleRequests(server)
}
```

**Resource cleanup on failure:**
```scala
supervised {
  val file = useCloseableInScope(new FileOutputStream("temp.dat"))
  
  fork {
    // Even if this fork fails...
    throw new RuntimeException("boom!")
  }
  
  // file.close() is still called during scope cleanup
}
```

**Nested resource management:**
```scala
def processFile(filename: String): Unit = supervised {
  val input = useCloseableInScope(new FileInputStream(filename))
  val output = useCloseableInScope(new FileOutputStream(s"$filename.processed"))
  
  // Both streams closed in reverse order of creation
  copyWithProcessing(input, output)
}
```

**Resource management guarantees:**
- Resources cleaned up in reverse order of acquisition
- Cleanup happens even on exceptions or interruptions
- No resource leaks in properly structured code
- Automatic error handling during cleanup
